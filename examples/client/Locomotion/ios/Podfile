# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
# $RNFirebaseAsStaticFramework = true

platform :ios, '13.4'
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'Locomotion' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'react-native-version-check', :path => '../node_modules/react-native-version-check'

  pod 'react-native-background-timer', :path => '../node_modules/react-native-background-timer'

  pod 'react-native-restart', :path => '../node_modules/react-native-restart'

  pod 'RNExitApp', :path => '../node_modules/react-native-exit-app'

  target 'LocomotionTests' do
    inherit! :complete
    # Pods for testing
  end
  
  # use_frameworks!

  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'FirebaseCrashlytics', '10.29.0', :modular_headers => true
  pod 'FirebaseSessions', '10.29.0', :modular_headers => true
  pod 'Firebase', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseCoreExtension', :modular_headers => true
  pod 'FirebaseInstallations', :modular_headers => true
  pod 'GoogleDataTransport', :modular_headers => true
  pod 'nanopb', :modular_headers => true

  post_install do |installer|
    # Bitcode stripping for Hermes
    bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
    hermes_framework_paths = [
      "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64/hermes.framework/hermes",
      "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64_x86_64-simulator/hermes.framework/hermes"
    ]
    
    hermes_framework_paths.each do |framework_path|
      full_path = File.join(Dir.pwd, framework_path)
      if File.exist?(full_path)
        strip_command = "#{bitcode_strip_path} #{full_path} -r -o #{full_path}"
        puts "Stripping bitcode: #{strip_command}"
        system(strip_command)
      end
    end
    
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Explicitly disable Bitcode for all targets
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
      end
      if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
        target.build_configurations.each do |config|
            config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
      if target.to_s === 'React-Codegen'
        puts 'Updating React-Codegen to have the min SWIFT_VERSION & ios deployment target'
        target.build_configurations.each do |config|
          config.build_settings['SWIFT_VERSION'] = '5.0'
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.4'
        end
      end
    end
  end
end
